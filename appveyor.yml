image:
- Visual Studio 2019
environment:
 CUSTOMER_TESTS_EXCEL_WRITE_TO_EXCEL: true
 CUSTOMER_TESTS_RELATIVE_PATH_TO_EXCELTESTS: ..\..\..\..\SampleTests\ExcelTests
build_script:
 - echo %CUSTOMER_TESTS_RELATIVE_PATH_TO_EXCELTESTS%
 - dotnet restore CustomerTestsExcelScaffolding.sln 
 # Ensure that the Excel tests can round trip to C#
 # Regenerate the sample tests from the excel (have to build first so that SampleSystemUnderTest.dll exists)
 - dotnet build CustomerTestsExcelScaffolding.sln   
 - .\AppveyorGenerateTests.bat
 - dotnet build CustomerTestsExcelScaffolding.sln  
 # run the tests, so that they re create the Excel Spreadsheets (requires some environment variables to be set)
 - dotnet test
 # Regenerate the sample tests again and build / test
 - .\AppveyorGenerateTests.bat
 - dotnet build CustomerTestsExcelScaffolding.sln 
 # run the unit tests and get coverage
 - packages\OpenCover\4.7.922\tools\OpenCover.Console.exe -register:Path64 -target:"C:\Program Files\dotnet\dotnet.exe" -targetargs:"test" -output:"coverage.xml" -returntargetcode -oldstyle
test_script:
  # upload the code coverage to codcov.io
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh -f "coverage.xml" -U "-s" -A "-s"
notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
    subject: 'Build {{status}}'
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
